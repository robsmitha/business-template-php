<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/14/2017
Description:	Creates the DAL class for  onlinecart table and respective stored procedures

*/



class Onlinecart
{

    // This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
    protected static function getDbSettings()
    {
        return "DAL/db_localsettings.php";
    }

    /******************************************************************/
    // Properties
    /******************************************************************/

    protected $ItemName;
    protected $ItemDescription;
    protected $ImgUrl;
    protected $Price;
    protected $ItemStatusType;
    protected $CustomerName;
    protected $Quantity;
    protected $ItemStartDate;
    protected $ItemEndDate;
    protected $ItemType;
    protected $CartItemId;


    /******************************************************************/
    // Constructors
    /******************************************************************/
    public function __construct()
    {
        $argv = func_get_args();
        switch (func_num_args()) {
            case 0:
                self::__constructBase();
                break;
            case 1:
                self::__constructPK($argv[0]);
                break;
            case 11:
                self::__constructFull($argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7], $argv[8], $argv[9], $argv[10]);
        }
    }


    public function __constructBase()
    {
        $this->ItemName = "";
        $this->ItemDescription = "";
        $this->ImgUrl = "";
        $this->Price = 0;
        $this->ItemStatusType = "";
        $this->CustomerName = "";
        $this->Quantity = 0;
        $this->ItemStartDate = "";
        $this->ItemEndDate = "";
        $this->ItemType = "";
        $this->CartItemId = 0;
    }


    public function __constructPK($paramId)
    {
        $this->load($paramId);
    }


    public function __constructFull($paramItemName, $paramItemDescription, $paramImgUrl, $paramPrice, $paramItemStatusType, $paramCustomerName, $paramQuantity, $paramItemStartDate, $paramItemEndDate, $paramItemType, $paramCartItemId)
    {
        $this->ItemName = $paramItemName;
        $this->ItemDescription = $paramItemDescription;
        $this->ImgUrl = $paramImgUrl;
        $this->Price = $paramPrice;
        $this->ItemStatusType = $paramItemStatusType;
        $this->CustomerName = $paramCustomerName;
        $this->Quantity = $paramQuantity;
        $this->ItemStartDate = $paramItemStartDate;
        $this->ItemEndDate = $paramItemEndDate;
        $this->ItemType = $paramItemType;
        $this->CartItemId = $paramCartItemId;
    }


    /******************************************************************/
    // Accessors / Mutators
    /******************************************************************/

    public function getItemName()
    {
        return $this->ItemName;
    }

    public function setItemName($value)
    {
        $this->ItemName = $value;
    }

    public function getItemDescription()
    {
        return $this->ItemDescription;
    }

    public function setItemDescription($value)
    {
        $this->ItemDescription = $value;
    }

    public function getImgUrl()
    {
        return $this->ImgUrl;
    }

    public function setImgUrl($value)
    {
        $this->ImgUrl = $value;
    }

    public function getPrice()
    {
        return $this->Price;
    }

    public function setPrice($value)
    {
        $this->Price = $value;
    }

    public function getItemStatusType()
    {
        return $this->ItemStatusType;
    }

    public function setItemStatusType($value)
    {
        $this->ItemStatusType = $value;
    }

    public function getCustomerName()
    {
        return $this->CustomerName;
    }

    public function setCustomerName($value)
    {
        $this->CustomerName = $value;
    }

    public function getQuantity()
    {
        return $this->Quantity;
    }

    public function setQuantity($value)
    {
        $this->Quantity = $value;
    }

    public function getItemStartDate()
    {
        return $this->ItemStartDate;
    }

    public function setItemStartDate($value)
    {
        $this->ItemStartDate = $value;
    }

    public function getItemEndDate()
    {
        return $this->ItemEndDate;
    }

    public function setItemEndDate($value)
    {
        $this->ItemEndDate = $value;
    }

    public function getItemType()
    {
        return $this->ItemType;
    }

    public function setItemType($value)
    {
        $this->ItemType = $value;
    }
    public function getCartItemId()
    {
        return $this->CartItemId;
    }

    public function setCartItemId($value)
    {
        $this->CartItemId = $value;
    }
    public static function loadbycartid($paramCartId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_cartitem_LoadOnlineCart(?)');
        $stmt->bind_param('i', $paramCartId);
        $stmt->execute();
        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $onlinecart = new OnlineCart($row['ItemName'],$row['ItemDescription'],$row['ImgUrl'],$row['Price'],$row['ItemStatusType'],$row['CustomerName'],$row['Quantity'],$row['ItemStartDate'],$row['ItemEndDate'],$row['ItemType'],$row['CartItemId']);
                $arr[] = $onlinecart;
            }
            return $arr;
        }
        else {
            //die("The query yielded zero results.No rows found.");
        }
    }
    public static function calculatetotal($paramCartId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_cartitem_CalculateTotal(?)');
        $stmt->bind_param('i', $paramCartId);
        $stmt->execute();
        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            return $row['TotalPrice'];
        }
    }
    public static function getcartcount($paramCartId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_cartitem_GetCartCount(?)');
        $stmt->bind_param('i', $paramCartId);
        $stmt->execute();
        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            return $row['NumberOfItems'];
        }
    }
}
