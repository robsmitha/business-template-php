/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/15/2017
Description:	Creates the blogcategory table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`blogcategory`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcategory_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcategory_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcategory_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcategory_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcategory_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcategory_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`blogcategory` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_blogcategory_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcategory_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`blogcategory`.`Id` AS `Id`,
		`blogcategory`.`Name` AS `Name`,
		`blogcategory`.`Description` AS `Description`
	FROM `blogcategory`
	WHERE 		`blogcategory`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcategory_LoadAll`
()
BEGIN
	SELECT
		`blogcategory`.`Id` AS `Id`,
		`blogcategory`.`Name` AS `Name`,
		`blogcategory`.`Description` AS `Description`
	FROM `blogcategory`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcategory_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `blogcategory` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcategory_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `blogcategory`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`blogcategory`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcategory_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `blogcategory`
	WHERE		`blogcategory`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcategory_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`blogcategory`.`Id` AS `Id`,
		`blogcategory`.`Name` AS `Name`,
		`blogcategory`.`Description` AS `Description`
	FROM `blogcategory`
	WHERE
		COALESCE(blogcategory.`Id`,0) = COALESCE(paramId,blogcategory.`Id`,0)
		AND COALESCE(blogcategory.`Name`,'') = COALESCE(paramName,blogcategory.`Name`,'')
		AND COALESCE(blogcategory.`Description`,'') = COALESCE(paramDescription,blogcategory.`Description`,'');
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/12/2017
Description:	Creates the itemtype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`itemtype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemtype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemtype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemtype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemtype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemtype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemtype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`itemtype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_itemtype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemtype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`itemtype`.`Id` AS `Id`,
		`itemtype`.`Name` AS `Name`,
		`itemtype`.`Description` AS `Description`
	FROM `itemtype`
	WHERE 		`itemtype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemtype_LoadAll`
()
BEGIN
	SELECT
		`itemtype`.`Id` AS `Id`,
		`itemtype`.`Name` AS `Name`,
		`itemtype`.`Description` AS `Description`
	FROM `itemtype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemtype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `itemtype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemtype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `itemtype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`itemtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemtype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `itemtype`
	WHERE		`itemtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemtype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`itemtype`.`Id` AS `Id`,
		`itemtype`.`Name` AS `Name`,
		`itemtype`.`Description` AS `Description`
	FROM `itemtype`
	WHERE
		COALESCE(itemtype.`Id`,0) = COALESCE(paramId,itemtype.`Id`,0)
		AND COALESCE(itemtype.`Name`,'') = COALESCE(paramName,itemtype.`Name`,'')
		AND COALESCE(itemtype.`Description`,'') = COALESCE(paramDescription,itemtype.`Description`,'');
END //
DELIMITER ;



/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the blogcommentstatustype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`blogcommentstatustype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcommentstatustype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcommentstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcommentstatustype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcommentstatustype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcommentstatustype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcommentstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`blogcommentstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_blogcommentstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcommentstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`blogcommentstatustype`.`Id` AS `Id`,
		`blogcommentstatustype`.`Name` AS `Name`,
		`blogcommentstatustype`.`Description` AS `Description`
	FROM `blogcommentstatustype`
	WHERE 		`blogcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcommentstatustype_LoadAll`
()
BEGIN
	SELECT
		`blogcommentstatustype`.`Id` AS `Id`,
		`blogcommentstatustype`.`Name` AS `Name`,
		`blogcommentstatustype`.`Description` AS `Description`
	FROM `blogcommentstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcommentstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `blogcommentstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcommentstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `blogcommentstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`blogcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcommentstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `blogcommentstatustype`
	WHERE		`blogcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcommentstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`blogcommentstatustype`.`Id` AS `Id`,
		`blogcommentstatustype`.`Name` AS `Name`,
		`blogcommentstatustype`.`Description` AS `Description`
	FROM `blogcommentstatustype`
	WHERE
		COALESCE(blogcommentstatustype.`Id`,0) = COALESCE(paramId,blogcommentstatustype.`Id`,0)
		AND COALESCE(blogcommentstatustype.`Name`,'') = COALESCE(paramName,blogcommentstatustype.`Name`,'')
		AND COALESCE(blogcommentstatustype.`Description`,'') = COALESCE(paramDescription,blogcommentstatustype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the cartstatustype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`cartstatustype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartstatustype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartstatustype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartstatustype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartstatustype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`cartstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_cartstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`cartstatustype`.`Id` AS `Id`,
		`cartstatustype`.`Name` AS `Name`,
		`cartstatustype`.`Description` AS `Description`
	FROM `cartstatustype`
	WHERE 		`cartstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartstatustype_LoadAll`
()
BEGIN
	SELECT
		`cartstatustype`.`Id` AS `Id`,
		`cartstatustype`.`Name` AS `Name`,
		`cartstatustype`.`Description` AS `Description`
	FROM `cartstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `cartstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `cartstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`cartstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `cartstatustype`
	WHERE		`cartstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`cartstatustype`.`Id` AS `Id`,
		`cartstatustype`.`Name` AS `Name`,
		`cartstatustype`.`Description` AS `Description`
	FROM `cartstatustype`
	WHERE
		COALESCE(cartstatustype.`Id`,0) = COALESCE(paramId,cartstatustype.`Id`,0)
		AND COALESCE(cartstatustype.`Name`,'') = COALESCE(paramName,cartstatustype.`Name`,'')
		AND COALESCE(cartstatustype.`Description`,'') = COALESCE(paramDescription,cartstatustype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the eventcommentstatustype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`eventcommentstatustype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcommentstatustype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcommentstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcommentstatustype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcommentstatustype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcommentstatustype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcommentstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`eventcommentstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_eventcommentstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcommentstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`eventcommentstatustype`.`Id` AS `Id`,
		`eventcommentstatustype`.`Name` AS `Name`,
		`eventcommentstatustype`.`Description` AS `Description`
	FROM `eventcommentstatustype`
	WHERE 		`eventcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcommentstatustype_LoadAll`
()
BEGIN
	SELECT
		`eventcommentstatustype`.`Id` AS `Id`,
		`eventcommentstatustype`.`Name` AS `Name`,
		`eventcommentstatustype`.`Description` AS `Description`
	FROM `eventcommentstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcommentstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `eventcommentstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcommentstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `eventcommentstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`eventcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcommentstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `eventcommentstatustype`
	WHERE		`eventcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcommentstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`eventcommentstatustype`.`Id` AS `Id`,
		`eventcommentstatustype`.`Name` AS `Name`,
		`eventcommentstatustype`.`Description` AS `Description`
	FROM `eventcommentstatustype`
	WHERE
		COALESCE(eventcommentstatustype.`Id`,0) = COALESCE(paramId,eventcommentstatustype.`Id`,0)
		AND COALESCE(eventcommentstatustype.`Name`,'') = COALESCE(paramName,eventcommentstatustype.`Name`,'')
		AND COALESCE(eventcommentstatustype.`Description`,'') = COALESCE(paramDescription,eventcommentstatustype.`Description`,'');
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/15/2017
Description:	Creates the eventtype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`eventtype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventtype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventtype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventtype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventtype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventtype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventtype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`eventtype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_eventtype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventtype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`eventtype`.`Id` AS `Id`,
		`eventtype`.`Name` AS `Name`,
		`eventtype`.`Description` AS `Description`
	FROM `eventtype`
	WHERE 		`eventtype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventtype_LoadAll`
()
BEGIN
	SELECT
		`eventtype`.`Id` AS `Id`,
		`eventtype`.`Name` AS `Name`,
		`eventtype`.`Description` AS `Description`
	FROM `eventtype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventtype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `eventtype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventtype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `eventtype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`eventtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventtype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `eventtype`
	WHERE		`eventtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventtype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`eventtype`.`Id` AS `Id`,
		`eventtype`.`Name` AS `Name`,
		`eventtype`.`Description` AS `Description`
	FROM `eventtype`
	WHERE
		COALESCE(eventtype.`Id`,0) = COALESCE(paramId,eventtype.`Id`,0)
		AND COALESCE(eventtype.`Name`,'') = COALESCE(paramName,eventtype.`Name`,'')
		AND COALESCE(eventtype.`Description`,'') = COALESCE(paramDescription,eventtype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the imagecommentstatustype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`imagecommentstatustype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecommentstatustype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecommentstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecommentstatustype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecommentstatustype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecommentstatustype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecommentstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`imagecommentstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_imagecommentstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecommentstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`imagecommentstatustype`.`Id` AS `Id`,
		`imagecommentstatustype`.`Name` AS `Name`,
		`imagecommentstatustype`.`Description` AS `Description`
	FROM `imagecommentstatustype`
	WHERE 		`imagecommentstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecommentstatustype_LoadAll`
()
BEGIN
	SELECT
		`imagecommentstatustype`.`Id` AS `Id`,
		`imagecommentstatustype`.`Name` AS `Name`,
		`imagecommentstatustype`.`Description` AS `Description`
	FROM `imagecommentstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecommentstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `imagecommentstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecommentstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `imagecommentstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`imagecommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecommentstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `imagecommentstatustype`
	WHERE		`imagecommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecommentstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`imagecommentstatustype`.`Id` AS `Id`,
		`imagecommentstatustype`.`Name` AS `Name`,
		`imagecommentstatustype`.`Description` AS `Description`
	FROM `imagecommentstatustype`
	WHERE
		COALESCE(imagecommentstatustype.`Id`,0) = COALESCE(paramId,imagecommentstatustype.`Id`,0)
		AND COALESCE(imagecommentstatustype.`Name`,'') = COALESCE(paramName,imagecommentstatustype.`Name`,'')
		AND COALESCE(imagecommentstatustype.`Description`,'') = COALESCE(paramDescription,imagecommentstatustype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the itemstatustype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`itemstatustype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemstatustype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemstatustype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemstatustype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemstatustype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_itemstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`itemstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_itemstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`itemstatustype`.`Id` AS `Id`,
		`itemstatustype`.`Name` AS `Name`,
		`itemstatustype`.`Description` AS `Description`
	FROM `itemstatustype`
	WHERE 		`itemstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemstatustype_LoadAll`
()
BEGIN
	SELECT
		`itemstatustype`.`Id` AS `Id`,
		`itemstatustype`.`Name` AS `Name`,
		`itemstatustype`.`Description` AS `Description`
	FROM `itemstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `itemstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `itemstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`itemstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `itemstatustype`
	WHERE		`itemstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_itemstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`itemstatustype`.`Id` AS `Id`,
		`itemstatustype`.`Name` AS `Name`,
		`itemstatustype`.`Description` AS `Description`
	FROM `itemstatustype`
	WHERE
		COALESCE(itemstatustype.`Id`,0) = COALESCE(paramId,itemstatustype.`Id`,0)
		AND COALESCE(itemstatustype.`Name`,'') = COALESCE(paramName,itemstatustype.`Name`,'')
		AND COALESCE(itemstatustype.`Description`,'') = COALESCE(paramDescription,itemstatustype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the role table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`role`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_role_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_role_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_role_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_role_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_role_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_role_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`role` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_role_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_role_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE 		`role`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_role_LoadAll`
()
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_role_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `role` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_role_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `role`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_role_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `role`
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_role_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE
		COALESCE(role.`Id`,0) = COALESCE(paramId,role.`Id`,0)
		AND COALESCE(role.`Name`,'') = COALESCE(paramName,role.`Name`,'')
		AND COALESCE(role.`Description`,'') = COALESCE(paramDescription,role.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the securityuser table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`securityuser`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_securityuser_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_securityuser_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_securityuser_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_securityuser_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_securityuser_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_securityuser_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`securityuser` (
Id INT AUTO_INCREMENT,
Username VARCHAR(255),
Password VARCHAR(255),
Email VARCHAR(255),
RoleId INT,
CreateDate DATETIME,
CONSTRAINT pk_securityuser_Id PRIMARY KEY (Id),
CONSTRAINT fk_securityuser_RoleId_Role_Id FOREIGN KEY (RoleId) REFERENCES role (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_LoadAll`
()
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_Add`
(
	 IN paramUsername VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramRoleId INT,
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `securityuser` (Username,Password,Email,RoleId,CreateDate)
	VALUES (paramUsername, paramPassword, paramEmail, paramRoleId, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_Update`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `securityuser`
	SET Username = paramUsername
		,Password = paramPassword
		,Email = paramEmail
		,RoleId = paramRoleId
		,CreateDate = paramCreateDate
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `securityuser`
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_Search`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE
		COALESCE(securityuser.`Id`,0) = COALESCE(paramId,securityuser.`Id`,0)
		AND COALESCE(securityuser.`Username`,'') = COALESCE(paramUsername,securityuser.`Username`,'')
		AND COALESCE(securityuser.`Password`,'') = COALESCE(paramPassword,securityuser.`Password`,'')
		AND COALESCE(securityuser.`Email`,'') = COALESCE(paramEmail,securityuser.`Email`,'')
		AND COALESCE(securityuser.`RoleId`,0) = COALESCE(paramRoleId,securityuser.`RoleId`,0)
		AND COALESCE(CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the customer table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`customer`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_customer_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_customer_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_customer_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_customer_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_customer_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_customer_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`customer` (
Id INT AUTO_INCREMENT,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Email VARCHAR(255),
Password VARCHAR(255),
CreateDate DATETIME,
CONSTRAINT pk_customer_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE 		`customer`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_LoadAll`
()
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_Add`
(
	 IN paramFirstName VARCHAR(255),
	 IN paramLastName VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `customer` (FirstName,LastName,Email,Password,CreateDate)
	VALUES (paramFirstName, paramLastName, paramEmail, paramPassword, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_Update`
(
	IN paramId INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `customer`
	SET FirstName = paramFirstName
		,LastName = paramLastName
		,Email = paramEmail
		,Password = paramPassword
		,CreateDate = paramCreateDate
	WHERE		`customer`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `customer`
	WHERE		`customer`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_Search`
(
	IN paramId INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE
		COALESCE(customer.`Id`,0) = COALESCE(paramId,customer.`Id`,0)
		AND COALESCE(customer.`FirstName`,'') = COALESCE(paramFirstName,customer.`FirstName`,'')
		AND COALESCE(customer.`LastName`,'') = COALESCE(paramLastName,customer.`LastName`,'')
		AND COALESCE(customer.`Email`,'') = COALESCE(paramEmail,customer.`Email`,'')
		AND COALESCE(customer.`Password`,'') = COALESCE(paramPassword,customer.`Password`,'')
		AND COALESCE(CAST(customer.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(customer.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;




/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/15/2017
Description:	Creates the blog table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`blog`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`blog` (
Id INT AUTO_INCREMENT,
Title VARCHAR(255),
Description VARCHAR(32768),
ImgUrl VARCHAR(1025),
BlogCategoryId INT,
SecurityUserId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_blog_Id PRIMARY KEY (Id),
CONSTRAINT fk_blog_BlogCategoryId_blogcategory_Id FOREIGN KEY (BlogCategoryId) REFERENCES blogcategory (Id),
CONSTRAINT fk_blog_SecurityUserId_securityuser_Id FOREIGN KEY (SecurityUserId) REFERENCES securityuser (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`blog`.`Id` AS `Id`,
		`blog`.`Title` AS `Title`,
		`blog`.`Description` AS `Description`,
		`blog`.`ImgUrl` AS `ImgUrl`,
		`blog`.`BlogCategoryId` AS `BlogCategoryId`,
		`blog`.`SecurityUserId` AS `SecurityUserId`,
		`blog`.`CreateDate` AS `CreateDate`,
		`blog`.`EditDate` AS `EditDate`
	FROM `blog`
	WHERE 		`blog`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_LoadAll`
()
BEGIN
	SELECT
		`blog`.`Id` AS `Id`,
		`blog`.`Title` AS `Title`,
		`blog`.`Description` AS `Description`,
		`blog`.`ImgUrl` AS `ImgUrl`,
		`blog`.`BlogCategoryId` AS `BlogCategoryId`,
		`blog`.`SecurityUserId` AS `SecurityUserId`,
		`blog`.`CreateDate` AS `CreateDate`,
		`blog`.`EditDate` AS `EditDate`
	FROM `blog`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Add`
(
	 IN paramTitle VARCHAR(255),
	 IN paramDescription VARCHAR(32768),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramBlogCategoryId INT,
	 IN paramSecurityUserId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `blog` (Title,Description,ImgUrl,BlogCategoryId,SecurityUserId,CreateDate,EditDate)
	VALUES (paramTitle, paramDescription, paramImgUrl, paramBlogCategoryId, paramSecurityUserId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Update`
(
	IN paramId INT,
	IN paramTitle VARCHAR(255),
	IN paramDescription VARCHAR(32768),
	IN paramImgUrl VARCHAR(1025),
	IN paramBlogCategoryId INT,
	IN paramSecurityUserId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `blog`
	SET Title = paramTitle
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,BlogCategoryId = paramBlogCategoryId
		,SecurityUserId = paramSecurityUserId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`blog`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `blog`
	WHERE		`blog`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Search`
(
	IN paramId INT,
	IN paramTitle VARCHAR(255),
	IN paramDescription VARCHAR(32768),
	IN paramImgUrl VARCHAR(1025),
	IN paramBlogCategoryId INT,
	IN paramSecurityUserId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`blog`.`Id` AS `Id`,
		`blog`.`Title` AS `Title`,
		`blog`.`Description` AS `Description`,
		`blog`.`ImgUrl` AS `ImgUrl`,
		`blog`.`BlogCategoryId` AS `BlogCategoryId`,
		`blog`.`SecurityUserId` AS `SecurityUserId`,
		`blog`.`CreateDate` AS `CreateDate`,
		`blog`.`EditDate` AS `EditDate`
	FROM `blog`
	WHERE
		COALESCE(blog.`Id`,0) = COALESCE(paramId,blog.`Id`,0)
		AND COALESCE(blog.`Title`,'') = COALESCE(paramTitle,blog.`Title`,'')
		AND COALESCE(blog.`Description`,'') = COALESCE(paramDescription,blog.`Description`,'')
		AND COALESCE(blog.`ImgUrl`,'') = COALESCE(paramImgUrl,blog.`ImgUrl`,'')
		AND COALESCE(blog.`BlogCategoryId`,0) = COALESCE(paramBlogCategoryId,blog.`BlogCategoryId`,0)
		AND COALESCE(blog.`SecurityUserId`,0) = COALESCE(paramSecurityUserId,blog.`SecurityUserId`,0)
		AND COALESCE(CAST(blog.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(blog.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(blog.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(blog.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the blogcomment table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`blogcomment`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcomment_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcomment_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcomment_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcomment_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcomment_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blogcomment_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`blogcomment` (
Id INT AUTO_INCREMENT,
Comment VARCHAR(32768),
CustomerId INT,
BlogCommentStatusTypeId INT,
BlogId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_blogcomment_Id PRIMARY KEY (Id),
CONSTRAINT fk_blogcomment_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_blogcomment_BlogCommentStatusTypeId_blogcommentstatustype_Id FOREIGN KEY (BlogCommentStatusTypeId) REFERENCES blogcommentstatustype (Id),
CONSTRAINT fk_blogcomment_BlogId_blog_Id FOREIGN KEY (BlogId) REFERENCES blog (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`blogcomment`.`Id` AS `Id`,
		`blogcomment`.`Comment` AS `Comment`,
		`blogcomment`.`CustomerId` AS `CustomerId`,
		`blogcomment`.`BlogCommentStatusTypeId` AS `BlogCommentStatusTypeId`,
		`blogcomment`.`BlogId` AS `BlogId`,
		`blogcomment`.`CreateDate` AS `CreateDate`,
		`blogcomment`.`EditDate` AS `EditDate`
	FROM `blogcomment`
	WHERE 		`blogcomment`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_LoadAll`
()
BEGIN
	SELECT
		`blogcomment`.`Id` AS `Id`,
		`blogcomment`.`Comment` AS `Comment`,
		`blogcomment`.`CustomerId` AS `CustomerId`,
		`blogcomment`.`BlogCommentStatusTypeId` AS `BlogCommentStatusTypeId`,
		`blogcomment`.`BlogId` AS `BlogId`,
		`blogcomment`.`CreateDate` AS `CreateDate`,
		`blogcomment`.`EditDate` AS `EditDate`
	FROM `blogcomment`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_Add`
(
	 IN paramComment VARCHAR(32768),
	 IN paramCustomerId INT,
	 IN paramBlogCommentStatusTypeId INT,
	 IN paramBlogId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `blogcomment` (Comment,CustomerId,BlogCommentStatusTypeId,BlogId,CreateDate,EditDate)
	VALUES (paramComment, paramCustomerId, paramBlogCommentStatusTypeId, paramBlogId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_Update`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramBlogCommentStatusTypeId INT,
	IN paramBlogId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `blogcomment`
	SET Comment = paramComment
		,CustomerId = paramCustomerId
		,BlogCommentStatusTypeId = paramBlogCommentStatusTypeId
		,BlogId = paramBlogId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`blogcomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `blogcomment`
	WHERE		`blogcomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_Search`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramBlogCommentStatusTypeId INT,
	IN paramBlogId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`blogcomment`.`Id` AS `Id`,
		`blogcomment`.`Comment` AS `Comment`,
		`blogcomment`.`CustomerId` AS `CustomerId`,
		`blogcomment`.`BlogCommentStatusTypeId` AS `BlogCommentStatusTypeId`,
		`blogcomment`.`BlogId` AS `BlogId`,
		`blogcomment`.`CreateDate` AS `CreateDate`,
		`blogcomment`.`EditDate` AS `EditDate`
	FROM `blogcomment`
	WHERE
		COALESCE(blogcomment.`Id`,0) = COALESCE(paramId,blogcomment.`Id`,0)
		AND COALESCE(blogcomment.`Comment`,'') = COALESCE(paramComment,blogcomment.`Comment`,'')
		AND COALESCE(blogcomment.`CustomerId`,0) = COALESCE(paramCustomerId,blogcomment.`CustomerId`,0)
		AND COALESCE(blogcomment.`BlogCommentStatusTypeId`,0) = COALESCE(paramBlogCommentStatusTypeId,blogcomment.`BlogCommentStatusTypeId`,0)
		AND COALESCE(blogcomment.`BlogId`,0) = COALESCE(paramBlogId,blogcomment.`BlogId`,0)
		AND COALESCE(CAST(blogcomment.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(blogcomment.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(blogcomment.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(blogcomment.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;




/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the cart table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`cart`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cart_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cart_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cart_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cart_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cart_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cart_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`cart` (
Id INT AUTO_INCREMENT,
CustomerId INT,
CartStatusTypeId INT,
CreateDate DATETIME,
CheckoutDate DATETIME,
CONSTRAINT pk_cart_Id PRIMARY KEY (Id),
CONSTRAINT fk_cart_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_cart_StatusTypeId_cartstatustype_Id FOREIGN KEY (CartStatusTypeId) REFERENCES cartstatustype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`cart`.`Id` AS `Id`,
		`cart`.`CustomerId` AS `CustomerId`,
		`cart`.`CartStatusTypeId` AS `CartStatusTypeId`,
		`cart`.`CreateDate` AS `CreateDate`,
		`cart`.`CheckoutDate` AS `CheckoutDate`
	FROM `cart`
	WHERE 		`cart`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_LoadAll`
()
BEGIN
	SELECT
		`cart`.`Id` AS `Id`,
		`cart`.`CustomerId` AS `CustomerId`,
		`cart`.`CartStatusTypeId` AS `CartStatusTypeId`,
		`cart`.`CreateDate` AS `CreateDate`,
		`cart`.`CheckoutDate` AS `CheckoutDate`
	FROM `cart`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_Add`
(
	 IN paramCustomerId INT,
	 IN paramCartStatusTypeId INT,
	 IN paramCreateDate DATETIME,
	 IN paramCheckoutDate DATETIME
)
BEGIN
	INSERT INTO `cart` (CustomerId,CartStatusTypeId,CreateDate,CheckoutDate)
	VALUES (paramCustomerId, paramCartStatusTypeId, paramCreateDate, paramCheckoutDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_Update`
(
	IN paramId INT,
	IN paramCustomerId INT,
	IN paramCartStatusTypeId INT,
	IN paramCreateDate DATETIME,
	IN paramCheckoutDate DATETIME
)
BEGIN
	UPDATE `cart`
	SET CustomerId = paramCustomerId
		,CartStatusTypeId = paramCartStatusTypeId
		,CreateDate = paramCreateDate
		,CheckoutDate = paramCheckoutDate
	WHERE		`cart`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `cart`
	WHERE		`cart`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_Search`
(
	IN paramId INT,
	IN paramCustomerId INT,
	IN paramCartStatusTypeId INT,
	IN paramCreateDate DATETIME,
	IN paramCheckoutDate DATETIME
)
BEGIN
	SELECT
		`cart`.`Id` AS `Id`,
		`cart`.`CustomerId` AS `CustomerId`,
		`cart`.`CartStatusTypeId` AS `CartStatusTypeId`,
		`cart`.`CreateDate` AS `CreateDate`,
		`cart`.`CheckoutDate` AS `CheckoutDate`
	FROM `cart`
	WHERE
		COALESCE(cart.`Id`,0) = COALESCE(paramId,cart.`Id`,0)
		AND COALESCE(cart.`CustomerId`,0) = COALESCE(paramCustomerId,cart.`CustomerId`,0)
		AND COALESCE(cart.`CartStatusTypeId`,0) = COALESCE(paramCartStatusTypeId,cart.`CartStatusTypeId`,0)
		AND COALESCE(CAST(cart.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(cart.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(cart.`CheckoutDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCheckoutDate AS DATE),CAST(cart.`CheckoutDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/12/2017
Description:	Creates the item table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`item`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_item_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_item_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_item_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_item_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_item_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_item_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`item` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ImgUrl VARCHAR(1025),
Price DECIMAL(9),
ItemTypeId INT,
ItemStatusTypeId INT,
CreateDate DATETIME,
Rating DECIMAL(9),
CONSTRAINT pk_item_Id PRIMARY KEY (Id),
CONSTRAINT fk_item_ItemTypeId_itemtype_Id FOREIGN KEY (ItemTypeId) REFERENCES itemtype (Id),
CONSTRAINT fk_item_ItemStatusTypeId_itemstatustype_Id FOREIGN KEY (ItemStatusTypeId) REFERENCES itemstatustype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_item_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`item`.`Id` AS `Id`,
		`item`.`Name` AS `Name`,
		`item`.`Description` AS `Description`,
		`item`.`ImgUrl` AS `ImgUrl`,
		`item`.`Price` AS `Price`,
		`item`.`ItemTypeId` AS `ItemTypeId`,
		`item`.`ItemStatusTypeId` AS `ItemStatusTypeId`,
		`item`.`CreateDate` AS `CreateDate`,
		`item`.`Rating` AS `Rating`
	FROM `item`
	WHERE 		`item`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_item_LoadAll`
()
BEGIN
	SELECT
		`item`.`Id` AS `Id`,
		`item`.`Name` AS `Name`,
		`item`.`Description` AS `Description`,
		`item`.`ImgUrl` AS `ImgUrl`,
		`item`.`Price` AS `Price`,
		`item`.`ItemTypeId` AS `ItemTypeId`,
		`item`.`ItemStatusTypeId` AS `ItemStatusTypeId`,
		`item`.`CreateDate` AS `CreateDate`,
		`item`.`Rating` AS `Rating`
	FROM `item`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_item_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramPrice DECIMAL(9),
	 IN paramItemTypeId INT,
	 IN paramItemStatusTypeId INT,
	 IN paramCreateDate DATETIME,
	 IN paramRating DECIMAL(9)
)
BEGIN
	INSERT INTO `item` (Name,Description,ImgUrl,Price,ItemTypeId,ItemStatusTypeId,CreateDate,Rating)
	VALUES (paramName, paramDescription, paramImgUrl, paramPrice, paramItemTypeId, paramItemStatusTypeId, paramCreateDate, paramRating);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_item_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramPrice DECIMAL(9),
	IN paramItemTypeId INT,
	IN paramItemStatusTypeId INT,
	IN paramCreateDate DATETIME,
	IN paramRating DECIMAL(9)
)
BEGIN
	UPDATE `item`
	SET Name = paramName
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,Price = paramPrice
		,ItemTypeId = paramItemTypeId
		,ItemStatusTypeId = paramItemStatusTypeId
		,CreateDate = paramCreateDate
		,Rating = paramRating
	WHERE		`item`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_item_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `item`
	WHERE		`item`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_item_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramPrice DECIMAL(9),
	IN paramItemTypeId INT,
	IN paramItemStatusTypeId INT,
	IN paramCreateDate DATETIME,
	IN paramRating DECIMAL(9)
)
BEGIN
	SELECT
		`item`.`Id` AS `Id`,
		`item`.`Name` AS `Name`,
		`item`.`Description` AS `Description`,
		`item`.`ImgUrl` AS `ImgUrl`,
		`item`.`Price` AS `Price`,
		`item`.`ItemTypeId` AS `ItemTypeId`,
		`item`.`ItemStatusTypeId` AS `ItemStatusTypeId`,
		`item`.`CreateDate` AS `CreateDate`,
		`item`.`Rating` AS `Rating`
	FROM `item`
	WHERE
		COALESCE(item.`Id`,0) = COALESCE(paramId,item.`Id`,0)
		AND COALESCE(item.`Name`,'') = COALESCE(paramName,item.`Name`,'')
		AND COALESCE(item.`Description`,'') = COALESCE(paramDescription,item.`Description`,'')
		AND COALESCE(item.`ImgUrl`,'') = COALESCE(paramImgUrl,item.`ImgUrl`,'')
		AND COALESCE(item.`Price`,0) = COALESCE(paramPrice,item.`Price`,0)
		AND COALESCE(item.`ItemTypeId`,0) = COALESCE(paramItemTypeId,item.`ItemTypeId`,0)
		AND COALESCE(item.`ItemStatusTypeId`,0) = COALESCE(paramItemStatusTypeId,item.`ItemStatusTypeId`,0)
		AND COALESCE(CAST(item.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(item.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(item.`Rating`,0) = COALESCE(paramRating,item.`Rating`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/12/2017
Description:	Creates the cartitem table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`cartitem`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`cartitem` (
Id INT AUTO_INCREMENT,
CartId INT,
ItemId INT,
AddDate DATETIME,
Quantity INT,
ItemStartDate DATETIME,
ItemEndDate DATETIME,
ItemTypeId INT,
CONSTRAINT pk_cartitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_cartitem_CartId_cart_Id FOREIGN KEY (CartId) REFERENCES cart (Id),
CONSTRAINT fk_cartitem_ItemId_item_Id FOREIGN KEY (ItemId) REFERENCES item (Id),
CONSTRAINT fk_cartitem_ItemTypeId_item_Id FOREIGN KEY (ItemTypeId) REFERENCES itemtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`
	WHERE 		`cartitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_LoadAll`
()
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Add`
(
	 IN paramCartId INT,
	 IN paramItemId INT,
	 IN paramAddDate DATETIME,
	 IN paramQuantity INT,
	 IN paramItemStartDate DATETIME,
	 IN paramItemEndDate DATETIME,
	 IN paramItemTypeId INT
)
BEGIN
	INSERT INTO `cartitem` (CartId,ItemId,AddDate,Quantity,ItemStartDate,ItemEndDate,ItemTypeId)
	VALUES (paramCartId, paramItemId, paramAddDate, paramQuantity, paramItemStartDate, paramItemEndDate, paramItemTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Update`
(
	IN paramId INT,
	IN paramCartId INT,
	IN paramItemId INT,
	IN paramAddDate DATETIME,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	UPDATE `cartitem`
	SET CartId = paramCartId
		,ItemId = paramItemId
		,AddDate = paramAddDate
		,Quantity = paramQuantity
		,ItemStartDate = paramItemStartDate
		,ItemEndDate = paramItemEndDate
		,ItemTypeId = paramItemTypeId
	WHERE		`cartitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `cartitem`
	WHERE		`cartitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Search`
(
	IN paramId INT,
	IN paramCartId INT,
	IN paramItemId INT,
	IN paramAddDate DATETIME,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`
	WHERE
		COALESCE(cartitem.`Id`,0) = COALESCE(paramId,cartitem.`Id`,0)
		AND COALESCE(cartitem.`CartId`,0) = COALESCE(paramCartId,cartitem.`CartId`,0)
		AND COALESCE(cartitem.`ItemId`,0) = COALESCE(paramItemId,cartitem.`ItemId`,0)
		AND COALESCE(CAST(cartitem.`AddDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramAddDate AS DATE),CAST(cartitem.`AddDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(cartitem.`Quantity`,0) = COALESCE(paramQuantity,cartitem.`Quantity`,0)
		AND COALESCE(CAST(cartitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemStartDate AS DATE),CAST(cartitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(cartitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemEndDate AS DATE),CAST(cartitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(cartitem.`ItemTypeId`,0) = COALESCE(paramItemTypeId,cartitem.`ItemTypeId`,0);
END //
DELIMITER ;



/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/22/2017
Description:	Creates the event table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`event`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`event` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ImgUrl VARCHAR(1025),
StartDate DATETIME,
EndDate DATETIME,
Location VARCHAR(512),
EventTypeId INT,
TicketLink VARCHAR(1025),
CONSTRAINT pk_event_Id PRIMARY KEY (Id),
CONSTRAINT fk_event_EventTypeId_eventtype_Id FOREIGN KEY (EventTypeId) REFERENCES eventtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`
	WHERE 		`event`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_LoadAll`
()
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramStartDate DATETIME,
	 IN paramEndDate DATETIME,
	 IN paramLocation VARCHAR(512),
	 IN paramEventTypeId INT,
	 IN paramTicketLink VARCHAR(1025)
)
BEGIN
	INSERT INTO `event` (Name,Description,ImgUrl,StartDate,EndDate,Location,EventTypeId,TicketLink)
	VALUES (paramName, paramDescription, paramImgUrl, paramStartDate, paramEndDate, paramLocation, paramEventTypeId, paramTicketLink);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramStartDate DATETIME,
	IN paramEndDate DATETIME,
	IN paramLocation VARCHAR(512),
	IN paramEventTypeId INT,
	IN paramTicketLink VARCHAR(1025)
)
BEGIN
	UPDATE `event`
	SET Name = paramName
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,StartDate = paramStartDate
		,EndDate = paramEndDate
		,Location = paramLocation
		,EventTypeId = paramEventTypeId
		,TicketLink = paramTicketLink
	WHERE		`event`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `event`
	WHERE		`event`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramStartDate DATETIME,
	IN paramEndDate DATETIME,
	IN paramLocation VARCHAR(512),
	IN paramEventTypeId INT,
	IN paramTicketLink VARCHAR(1025)
)
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`
	WHERE
		COALESCE(event.`Id`,0) = COALESCE(paramId,event.`Id`,0)
		AND COALESCE(event.`Name`,'') = COALESCE(paramName,event.`Name`,'')
		AND COALESCE(event.`Description`,'') = COALESCE(paramDescription,event.`Description`,'')
		AND COALESCE(event.`ImgUrl`,'') = COALESCE(paramImgUrl,event.`ImgUrl`,'')
		AND COALESCE(CAST(event.`StartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramStartDate AS DATE),CAST(event.`StartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(event.`EndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEndDate AS DATE),CAST(event.`EndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(event.`Location`,'') = COALESCE(paramLocation,event.`Location`,'')
		AND COALESCE(event.`EventTypeId`,0) = COALESCE(paramEventTypeId,event.`EventTypeId`,0)
		AND COALESCE(event.`TicketLink`,'') = COALESCE(paramTicketLink,event.`TicketLink`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the eventcomment table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`eventcomment`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcomment_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcomment_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcomment_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcomment_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcomment_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_eventcomment_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`eventcomment` (
Id INT AUTO_INCREMENT,
Comment VARCHAR(32768),
CustomerId INT,
EventCommentStatusTypeId INT,
EventId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_eventcomment_Id PRIMARY KEY (Id),
CONSTRAINT fk_eventcomment_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_eventcomment_StatusTypeId_statustype_Id FOREIGN KEY (EventCommentStatusTypeId) REFERENCES eventcommentstatustype (Id),
CONSTRAINT fk_eventcomment_EventId_event_Id FOREIGN KEY (EventId) REFERENCES event (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`
	WHERE 		`eventcomment`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_LoadAll`
()
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_Add`
(
	 IN paramComment VARCHAR(32768),
	 IN paramCustomerId INT,
	 IN paramEventCommentStatusTypeId INT,
	 IN paramEventId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `eventcomment` (Comment,CustomerId,EventCommentStatusTypeId,EventId,CreateDate,EditDate)
	VALUES (paramComment, paramCustomerId, paramEventCommentStatusTypeId, paramEventId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_Update`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramEventCommentStatusTypeId INT,
	IN paramEventId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `eventcomment`
	SET Comment = paramComment
		,CustomerId = paramCustomerId
		,EventCommentStatusTypeId = paramEventCommentStatusTypeId
		,EventId = paramEventId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`eventcomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `eventcomment`
	WHERE		`eventcomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_Search`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramEventCommentStatusTypeId INT,
	IN paramEventId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`
	WHERE
		COALESCE(eventcomment.`Id`,0) = COALESCE(paramId,eventcomment.`Id`,0)
		AND COALESCE(eventcomment.`Comment`,'') = COALESCE(paramComment,eventcomment.`Comment`,'')
		AND COALESCE(eventcomment.`CustomerId`,0) = COALESCE(paramCustomerId,eventcomment.`CustomerId`,0)
		AND COALESCE(eventcomment.`EventCommentStatusTypeId`,0) = COALESCE(paramEventCommentStatusTypeId,eventcomment.`EventCommentStatusTypeId`,0)
		AND COALESCE(eventcomment.`EventId`,0) = COALESCE(paramEventId,eventcomment.`EventId`,0)
		AND COALESCE(CAST(eventcomment.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(eventcomment.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(eventcomment.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(eventcomment.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/23/2017
Description:	Creates the image table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`image`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_image_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_image_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_image_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_image_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_image_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_image_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`image` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ImgUrl VARCHAR(1025),
EventId INT,
Views INT,
IsFeaturedImage INT,
CONSTRAINT pk_image_Id PRIMARY KEY (Id),
CONSTRAINT fk_image_EventId_event_Id FOREIGN KEY (EventId) REFERENCES event (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`
	WHERE 		`image`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_LoadAll`
()
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramEventId INT,
	 IN paramViews INT,
	 IN paramIsFeaturedImage INT
)
BEGIN
	INSERT INTO `image` (Name,Description,ImgUrl,EventId,Views,IsFeaturedImage)
	VALUES (paramName, paramDescription, paramImgUrl, paramEventId, paramViews, paramIsFeaturedImage);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramEventId INT,
	IN paramViews INT,
	IN paramIsFeaturedImage INT
)
BEGIN
	UPDATE `image`
	SET Name = paramName
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,EventId = paramEventId
		,Views = paramViews
		,IsFeaturedImage = paramIsFeaturedImage
	WHERE		`image`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `image`
	WHERE		`image`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramEventId INT,
	IN paramViews INT,
	IN paramIsFeaturedImage INT
)
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`
	WHERE
		COALESCE(image.`Id`,0) = COALESCE(paramId,image.`Id`,0)
		AND COALESCE(image.`Name`,'') = COALESCE(paramName,image.`Name`,'')
		AND COALESCE(image.`Description`,'') = COALESCE(paramDescription,image.`Description`,'')
		AND COALESCE(image.`ImgUrl`,'') = COALESCE(paramImgUrl,image.`ImgUrl`,'')
		AND COALESCE(image.`EventId`,0) = COALESCE(paramEventId,image.`EventId`,0)
		AND COALESCE(image.`Views`,0) = COALESCE(paramViews,image.`Views`,0)
		AND COALESCE(image.`IsFeaturedImage`,0) = COALESCE(paramIsFeaturedImage,image.`IsFeaturedImage`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the imagecomment table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`imagecomment`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecomment_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecomment_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecomment_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecomment_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecomment_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_imagecomment_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`imagecomment` (
Id INT AUTO_INCREMENT,
Comment VARCHAR(32768),
CustomerId INT,
ImageCommentStatusTypeId INT,
ImageId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_imagecomment_Id PRIMARY KEY (Id),
CONSTRAINT fk_imagecomment_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_imagecomment_StatusTypeId_statustype_Id FOREIGN KEY (ImageCommentStatusTypeId) REFERENCES imagecommentstatustype (Id),
CONSTRAINT fk_imagecomment_ImageId_image_Id FOREIGN KEY (ImageId) REFERENCES image (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`
	WHERE 		`imagecomment`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_LoadAll`
()
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_Add`
(
	 IN paramComment VARCHAR(32768),
	 IN paramCustomerId INT,
	 IN paramImageCommentStatusTypeId INT,
	 IN paramImageId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `imagecomment` (Comment,CustomerId,ImageCommentStatusTypeId,ImageId,CreateDate,EditDate)
	VALUES (paramComment, paramCustomerId, paramImageCommentStatusTypeId, paramImageId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_Update`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramImageCommentStatusTypeId INT,
	IN paramImageId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `imagecomment`
	SET Comment = paramComment
		,CustomerId = paramCustomerId
		,ImageCommentStatusTypeId = paramImageCommentStatusTypeId
		,ImageId = paramImageId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`imagecomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `imagecomment`
	WHERE		`imagecomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_Search`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramImageCommentStatusTypeId INT,
	IN paramImageId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`
	WHERE
		COALESCE(imagecomment.`Id`,0) = COALESCE(paramId,imagecomment.`Id`,0)
		AND COALESCE(imagecomment.`Comment`,'') = COALESCE(paramComment,imagecomment.`Comment`,'')
		AND COALESCE(imagecomment.`CustomerId`,0) = COALESCE(paramCustomerId,imagecomment.`CustomerId`,0)
		AND COALESCE(imagecomment.`ImageCommentStatusTypeId`,0) = COALESCE(paramImageCommentStatusTypeId,imagecomment.`ImageCommentStatusTypeId`,0)
		AND COALESCE(imagecomment.`ImageId`,0) = COALESCE(paramImageId,imagecomment.`ImageId`,0)
		AND COALESCE(CAST(imagecomment.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(imagecomment.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(imagecomment.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(imagecomment.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blogcomment_LoadByBlogId`
(
	 IN paramBlogId INT
)
BEGIN
	SELECT
		`blogcomment`.`Id` AS `Id`,
		`blogcomment`.`Comment` AS `Comment`,
		`blogcomment`.`CustomerId` AS `CustomerId`,
		`blogcomment`.`BlogCommentStatusTypeId` AS `BlogCommentStatusTypeId`,
		`blogcomment`.`BlogId` AS `BlogId`,
		`blogcomment`.`CreateDate` AS `CreateDate`,
		`blogcomment`.`EditDate` AS `EditDate`
	FROM `blogcomment`
	WHERE 		`blogcomment`.`BlogId` = paramBlogId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_CalculateTotal`
(
	 IN paramCartId INT
)
BEGIN
	SELECT
		SUM(`item`.`Price`) AS 'TotalPrice'
	FROM `cartitem`
	JOIN `item` ON `item`.`Id` = `cartitem`.`ItemId`
	WHERE 		`cartitem`.`cartId` = paramCartId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_GetCartCount`
(
	 IN paramCartId INT
)
BEGIN
	SELECT
		COUNT(*) AS 'NumberOfItems'
	FROM `cartitem`
	WHERE 		`cartitem`.`cartId` = paramCartId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cart_LoadByCustomerId`
(
	 IN paramCustomerId INT
)
BEGIN
	SELECT DISTINCT
		`cart`.`Id` AS `Id`,
		`cart`.`CustomerId` AS `CustomerId`,
		`cart`.`CartStatusTypeId` AS `CartStatusTypeId`,
		`cart`.`CreateDate` AS `CreateDate`,
		`cart`.`CheckoutDate` AS `CheckoutDate`
	FROM `cart`
	WHERE 		`cart`.`CustomerId` = paramCustomerId
	AND `cart`.`CheckoutDate` IS NULL;  -- cart has not been checked out yet
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_LoadOnlineCart`
(
	 IN paramCartId INT
)
BEGIN
	SELECT
		`item`.`Name` AS `ItemName`,
		`item`.`Description` AS `ItemDescription`,
		`item`.`ImgUrl` AS `ImgUrl`,
		`item`.`Price` AS `Price`,
		(SELECT `itemstatustype`.`Name` FROM `itemstatustype` WHERE `itemstatustype`.`Id` = `item`.`ItemStatusTypeId`) AS `ItemStatusType`,
		(SELECT CONCAT(`customer`.`FirstName`, " ", `customer`.`LastName`) FROM `customer` WHERE `customer`.`Id` = `cart`.`CustomerId`) AS `CustomerName`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		(SELECT `itemtype`.`name` FROM `itemtype` WHERE `itemtype`.`Id` = `item`.`ItemTypeId`) AS `ItemType`,
		`cartitem`.`Id` AS `CartItemId`
	FROM `cartitem`
	JOIN `cart` ON `cart`.`id` = `cartitem`.cartId
	JOIN `item` ON `item`.`Id` = `cartitem`.`ItemId`
	WHERE 		`cartitem`.`cartId` = paramCartId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_customer_Lookup`
(
	IN paramEmail VARCHAR(255)
)
BEGIN
  SELECT
	  `customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE 		`customer`.`Email` = paramEmail;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_eventcomment_LoadByEventId`
(
	 IN paramEventId INT
)
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`
	WHERE 		`eventcomment`.`EventId` = paramEventId;
END //
DELIMITER ;


use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_imagecomment_LoadByImageId`
(
	 IN paramImageId INT
)
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`
	WHERE 		`imagecomment`.`ImageId` = paramImageId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_securityuser_Lookup`
(
	IN paramUsername VARCHAR(255)
)
BEGIN
  SELECT
			`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Username` = paramUsername;
END //
DELIMITER ;

use businesstemplate;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_LoadFeaturedImages`
()
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`
	WHERE `image`.`IsFeaturedImage` = 1;
END //
DELIMITER ;

use businesstemplate;
INSERT INTO `blogcategory` (`Id`, `Name`, `Description`) VALUES (1, 'Bootstrap 4', 'New Bootstrap framework');

use businesstemplate;
INSERT INTO `blogcommentstatustype` (`Id`, `Name`, `Description`) VALUES ('1', 'Active', 'Comment will appear on blog post.');

use businesstemplate;

INSERT INTO `cartstatustype` (`Id`, `Name`, `Description`) VALUES (1, 'Active Cart', 'Cart has not been checkout and is recognized as active. We will not delete any active carts.');
INSERT INTO `cartstatustype` (`Id`, `Name`, `Description`) VALUES (2, 'Inactive Cart', 'Cart has been checked out or abandoned.');

use businesstemplate;
INSERT INTO `eventcommentstatustype` (`Id`, `Name`, `Description`) VALUES ('1', 'Active', 'Comment will appear on event page.');

use businesstemplate;
INSERT INTO `eventtype` (`Id`, `Name`, `Description`) VALUES ('1', 'General', 'General Event.');

use businesstemplate;
INSERT INTO `imagecommentstatustype` (`Id`, `Name`, `Description`) VALUES ('1', 'Active', 'Comment will appear on image post.');

use businesstemplate;
INSERT INTO `itemtype` (`Id`, `Name`, `Description`) VALUES ('1', 'General', 'General Item Category');
INSERT INTO `itemtype` (`Id`, `Name`, `Description`) VALUES ('2', 'Subscriptions', 'Subscriptions with effective start end dates');
INSERT INTO `itemtype` (`Id`, `Name`, `Description`) VALUES ('3', 'Tickets', 'Tickets with effective start end dates');

use businesstemplate;

INSERT INTO `itemstatustype` (`Id`, `Name`, `Description`) VALUES (1, 'Active Item', 'Item will appear on site');
INSERT INTO `itemstatustype` (`Id`, `Name`, `Description`) VALUES (2, 'Inactive Item', 'Item will not appear on site');
INSERT INTO `itemstatustype` (`Id`, `Name`, `Description`) VALUES (3, 'On Sale Item', 'Item is on sale');

use businesstemplate;
INSERT INTO `role` (`Id`, `Name`, `Description`) VALUES ('1', 'Administrator', 'Administrator Role.');


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/27/2017
Description:	Creates the orderstatustype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`orderstatustype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderstatustype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderstatustype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderstatustype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderstatustype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`orderstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_orderstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`orderstatustype`.`Id` AS `Id`,
		`orderstatustype`.`Name` AS `Name`,
		`orderstatustype`.`Description` AS `Description`
	FROM `orderstatustype`
	WHERE 		`orderstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderstatustype_LoadAll`
()
BEGIN
	SELECT
		`orderstatustype`.`Id` AS `Id`,
		`orderstatustype`.`Name` AS `Name`,
		`orderstatustype`.`Description` AS `Description`
	FROM `orderstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `orderstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `orderstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`orderstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `orderstatustype`
	WHERE		`orderstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`orderstatustype`.`Id` AS `Id`,
		`orderstatustype`.`Name` AS `Name`,
		`orderstatustype`.`Description` AS `Description`
	FROM `orderstatustype`
	WHERE
		COALESCE(orderstatustype.`Id`,0) = COALESCE(paramId,orderstatustype.`Id`,0)
		AND COALESCE(orderstatustype.`Name`,'') = COALESCE(paramName,orderstatustype.`Name`,'')
		AND COALESCE(orderstatustype.`Description`,'') = COALESCE(paramDescription,orderstatustype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/27/2017
Description:	Creates the order table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`order`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`order` (
Id INT AUTO_INCREMENT,
CustomerId INT,
OrderStatusTypeId INT,
OrderDate DATETIME,
StripeCharge VARCHAR(255),
StripeCustomer VARCHAR(255),
StripeCard VARCHAR(255),
StripeAmount DECIMAL(9),
CONSTRAINT pk_order_Id PRIMARY KEY (Id),
CONSTRAINT fk_order_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_order_OrderStatusTypeId_orderstatustype_Id FOREIGN KEY (OrderStatusTypeId) REFERENCES orderstatustype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`
	WHERE 		`order`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_LoadAll`
()
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Add`
(
	 IN paramCustomerId INT,
	 IN paramOrderStatusTypeId INT,
	 IN paramOrderDate DATETIME,
	 IN paramStripeCharge VARCHAR(255),
	 IN paramStripeCustomer VARCHAR(255),
	 IN paramStripeCard VARCHAR(255),
	 IN paramStripeAmount DECIMAL(9)
)
BEGIN
	INSERT INTO `order` (CustomerId,OrderStatusTypeId,OrderDate,StripeCharge,StripeCustomer,StripeCard,StripeAmount)
	VALUES (paramCustomerId, paramOrderStatusTypeId, paramOrderDate, paramStripeCharge, paramStripeCustomer, paramStripeCard, paramStripeAmount);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Update`
(
	IN paramId INT,
	IN paramCustomerId INT,
	IN paramOrderStatusTypeId INT,
	IN paramOrderDate DATETIME,
	IN paramStripeCharge VARCHAR(255),
	IN paramStripeCustomer VARCHAR(255),
	IN paramStripeCard VARCHAR(255),
	IN paramStripeAmount DECIMAL(9)
)
BEGIN
	UPDATE `order`
	SET CustomerId = paramCustomerId
		,OrderStatusTypeId = paramOrderStatusTypeId
		,OrderDate = paramOrderDate
		,StripeCharge = paramStripeCharge
		,StripeCustomer = paramStripeCustomer
		,StripeCard = paramStripeCard
		,StripeAmount = paramStripeAmount
	WHERE		`order`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `order`
	WHERE		`order`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Search`
(
	IN paramId INT,
	IN paramCustomerId INT,
	IN paramOrderStatusTypeId INT,
	IN paramOrderDate DATETIME,
	IN paramStripeCharge VARCHAR(255),
	IN paramStripeCustomer VARCHAR(255),
	IN paramStripeCard VARCHAR(255),
	IN paramStripeAmount DECIMAL(9)
)
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`
	WHERE
		COALESCE(`order`.`Id`,0) = COALESCE(paramId,`order`.`Id`,0)
		AND COALESCE(`order`.`CustomerId`,0) = COALESCE(paramCustomerId,`order`.`CustomerId`,0)
		AND COALESCE(`order`.`OrderStatusTypeId`,0) = COALESCE(paramOrderStatusTypeId,`order`.`OrderStatusTypeId`,0)
		AND COALESCE(CAST(`order`.`OrderDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramOrderDate AS DATE),CAST(`order`.`OrderDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(`order`.`StripeCharge`,'') = COALESCE(paramStripeCharge,`order`.`StripeCharge`,'')
		AND COALESCE(`order`.`StripeCustomer`,'') = COALESCE(paramStripeCustomer,`order`.`StripeCustomer`,'')
		AND COALESCE(`order`.`StripeCard`,'') = COALESCE(paramStripeCard,`order`.`StripeCard`,'')
		AND COALESCE(`order`.`StripeAmount`,0) = COALESCE(paramStripeAmount,`order`.`StripeAmount`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/27/2017
Description:	Creates the orderitem table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`orderitem`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`orderitem` (
Id INT AUTO_INCREMENT,
OrderId INT,
ItemId INT,
Quantity INT,
ItemStartDate DATETIME,
ItemEndDate DATETIME,
ItemTypeId INT,
CONSTRAINT pk_orderitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_orderitem_OrderId_order_Id FOREIGN KEY (OrderId) REFERENCES `order` (Id),
CONSTRAINT fk_orderitem_ItemId_item_Id FOREIGN KEY (ItemId) REFERENCES item (Id),
CONSTRAINT fk_orderitem_ItemTypeId_itemtype_Id FOREIGN KEY (ItemTypeId) REFERENCES itemtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`
	WHERE 		`orderitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_LoadAll`
()
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Add`
(
	 IN paramOrderId INT,
	 IN paramItemId INT,
	 IN paramQuantity INT,
	 IN paramItemStartDate DATETIME,
	 IN paramItemEndDate DATETIME,
	 IN paramItemTypeId INT
)
BEGIN
	INSERT INTO `orderitem` (OrderId,ItemId,Quantity,ItemStartDate,ItemEndDate,ItemTypeId)
	VALUES (paramOrderId, paramItemId, paramQuantity, paramItemStartDate, paramItemEndDate, paramItemTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Update`
(
	IN paramId INT,
	IN paramOrderId INT,
	IN paramItemId INT,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	UPDATE `orderitem`
	SET OrderId = paramOrderId
		,ItemId = paramItemId
		,Quantity = paramQuantity
		,ItemStartDate = paramItemStartDate
		,ItemEndDate = paramItemEndDate
		,ItemTypeId = paramItemTypeId
	WHERE		`orderitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `orderitem`
	WHERE		`orderitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Search`
(
	IN paramId INT,
	IN paramOrderId INT,
	IN paramItemId INT,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`
	WHERE
		COALESCE(orderitem.`Id`,0) = COALESCE(paramId,orderitem.`Id`,0)
		AND COALESCE(orderitem.`OrderId`,0) = COALESCE(paramOrderId,orderitem.`OrderId`,0)
		AND COALESCE(orderitem.`ItemId`,0) = COALESCE(paramItemId,orderitem.`ItemId`,0)
		AND COALESCE(orderitem.`Quantity`,0) = COALESCE(paramQuantity,orderitem.`Quantity`,0)
		AND COALESCE(CAST(orderitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemStartDate AS DATE),CAST(orderitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(orderitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemEndDate AS DATE),CAST(orderitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(orderitem.`ItemTypeId`,0) = COALESCE(paramItemTypeId,orderitem.`ItemTypeId`,0);
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/4/2018
Description:	Creates the portfoliocategory table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`portfoliocategory`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfoliocategory_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfoliocategory_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfoliocategory_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfoliocategory_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfoliocategory_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfoliocategory_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`portfoliocategory` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_portfoliocategory_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfoliocategory_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`portfoliocategory`.`Id` AS `Id`,
		`portfoliocategory`.`Name` AS `Name`,
		`portfoliocategory`.`Description` AS `Description`
	FROM `portfoliocategory`
	WHERE 		`portfoliocategory`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfoliocategory_LoadAll`
()
BEGIN
	SELECT
		`portfoliocategory`.`Id` AS `Id`,
		`portfoliocategory`.`Name` AS `Name`,
		`portfoliocategory`.`Description` AS `Description`
	FROM `portfoliocategory`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfoliocategory_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `portfoliocategory` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfoliocategory_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `portfoliocategory`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`portfoliocategory`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfoliocategory_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `portfoliocategory`
	WHERE		`portfoliocategory`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfoliocategory_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`portfoliocategory`.`Id` AS `Id`,
		`portfoliocategory`.`Name` AS `Name`,
		`portfoliocategory`.`Description` AS `Description`
	FROM `portfoliocategory`
	WHERE
		COALESCE(portfoliocategory.`Id`,0) = COALESCE(paramId,portfoliocategory.`Id`,0)
		AND COALESCE(portfoliocategory.`Name`,'') = COALESCE(paramName,portfoliocategory.`Name`,'')
		AND COALESCE(portfoliocategory.`Description`,'') = COALESCE(paramDescription,portfoliocategory.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/4/2018
Description:	Creates the portfolioitem table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`portfolioitem`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfolioitem_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfolioitem_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfolioitem_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfolioitem_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfolioitem_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_portfolioitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`portfolioitem` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ProjectUrl VARCHAR(512),
ImageUrl VARCHAR(1025),
PortfolioCategoryId INT,
CreateDate DATETIME,
CONSTRAINT pk_portfolioitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_portfolioitem_CategoryId_portfoliocategory_Id FOREIGN KEY (PortfolioCategoryId) REFERENCES portfoliocategory (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`portfolioitem`.`Id` AS `Id`,
		`portfolioitem`.`Name` AS `Name`,
		`portfolioitem`.`Description` AS `Description`,
		`portfolioitem`.`ProjectUrl` AS `ProjectUrl`,
		`portfolioitem`.`ImageUrl` AS `ImageUrl`,
		`portfolioitem`.`PortfolioCategoryId` AS `PortfolioCategoryId`,
		`portfolioitem`.`CreateDate` AS `CreateDate`
	FROM `portfolioitem`
	WHERE 		`portfolioitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_LoadAll`
()
BEGIN
	SELECT
		`portfolioitem`.`Id` AS `Id`,
		`portfolioitem`.`Name` AS `Name`,
		`portfolioitem`.`Description` AS `Description`,
		`portfolioitem`.`ProjectUrl` AS `ProjectUrl`,
		`portfolioitem`.`ImageUrl` AS `ImageUrl`,
		`portfolioitem`.`PortfolioCategoryId` AS `PortfolioCategoryId`,
		`portfolioitem`.`CreateDate` AS `CreateDate`
	FROM `portfolioitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramProjectUrl VARCHAR(512),
	 IN paramImageUrl VARCHAR(1025),
	 IN paramPortfolioCategoryId INT,
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `portfolioitem` (Name,Description,ProjectUrl,ImageUrl,PortfolioCategoryId,CreateDate)
	VALUES (paramName, paramDescription, paramProjectUrl, paramImageUrl, paramPortfolioCategoryId, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramProjectUrl VARCHAR(512),
	IN paramImageUrl VARCHAR(1025),
	IN paramPortfolioCategoryId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `portfolioitem`
	SET Name = paramName
		,Description = paramDescription
		,ProjectUrl = paramProjectUrl
		,ImageUrl = paramImageUrl
		,PortfolioCategoryId = paramPortfolioCategoryId
		,CreateDate = paramCreateDate
	WHERE		`portfolioitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `portfolioitem`
	WHERE		`portfolioitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramProjectUrl VARCHAR(512),
	IN paramImageUrl VARCHAR(1025),
	IN paramPortfolioCategoryId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`portfolioitem`.`Id` AS `Id`,
		`portfolioitem`.`Name` AS `Name`,
		`portfolioitem`.`Description` AS `Description`,
		`portfolioitem`.`ProjectUrl` AS `ProjectUrl`,
		`portfolioitem`.`ImageUrl` AS `ImageUrl`,
		`portfolioitem`.`PortfolioCategoryId` AS `PortfolioCategoryId`,
		`portfolioitem`.`CreateDate` AS `CreateDate`
	FROM `portfolioitem`
	WHERE
		COALESCE(portfolioitem.`Id`,0) = COALESCE(paramId,portfolioitem.`Id`,0)
		AND COALESCE(portfolioitem.`Name`,'') = COALESCE(paramName,portfolioitem.`Name`,'')
		AND COALESCE(portfolioitem.`Description`,'') = COALESCE(paramDescription,portfolioitem.`Description`,'')
		AND COALESCE(portfolioitem.`ProjectUrl`,'') = COALESCE(paramProjectUrl,portfolioitem.`ProjectUrl`,'')
		AND COALESCE(portfolioitem.`ImageUrl`,'') = COALESCE(paramImageUrl,portfolioitem.`ImageUrl`,'')
		AND COALESCE(portfolioitem.`PortfolioCategoryId`,'') = COALESCE(paramPortfolioCategoryId,portfolioitem.`PortfolioCategoryId`,'')
		AND COALESCE(CAST(portfolioitem.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(portfolioitem.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


use businesstemplate;
INSERT INTO `orderstatustype` (`Id`, `Name`, `Description`) VALUES ('1', 'Success', 'Order was placed successfully.');
INSERT INTO `orderstatustype` (`Id`, `Name`, `Description`) VALUES ('2', 'Failed', 'Order was not placed successfully.');

use businesstemplate;
INSERT INTO `portfoliocategory` (`Id`, `Name`, `Description`) VALUES ('1', 'PHP/MySQL Application', 'PHP/MySQL Application.');

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_LoadByCustomerId`
(
	 IN paramCustomerId INT
)
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`
	WHERE 		`order`.`CustomerId` = paramCustomerId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_LoadByOrderId`
(
	 IN paramOrderId INT
)
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`
	WHERE 		`orderitem`.`OrderId` = paramOrderId;
END //
DELIMITER ;

use businesstemplate;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_portfolioitem_LoadByPortfolioCategoryId`
(
	 IN paramPortfolioCategoryId INT
)
BEGIN
	SELECT
		`portfolioitem`.`Id` AS `Id`,
		`portfolioitem`.`Name` AS `Name`,
		`portfolioitem`.`Description` AS `Description`,
		`portfolioitem`.`ProjectUrl` AS `ProjectUrl`,
		`portfolioitem`.`ImageUrl` AS `ImageUrl`,
		`portfolioitem`.`PortfolioCategoryId` AS `PortfolioCategoryId`,
		`portfolioitem`.`CreateDate` AS `CreateDate`
	FROM `portfolioitem`
	WHERE 		`portfolioitem`.`PortfolioCategoryId` = paramPortfolioCategoryId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_image_LoadByEventId`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`
	WHERE 		`image`.`EventId` = paramId;
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_LoadByCartId`
(
	 IN paramCartId INT
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`
	WHERE 		`cartitem`.`CartId` = paramCartId;
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/14/2018
Description:	Creates the subscriber table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`subscriber`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_subscriber_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_subscriber_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_subscriber_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_subscriber_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_subscriber_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_subscriber_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`subscriber` (
Id INT AUTO_INCREMENT,
Email VARCHAR(255),
CreateDate DATETIME,
CONSTRAINT pk_subscriber_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`
	WHERE 		`subscriber`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_LoadAll`
()
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_Add`
(
	 IN paramEmail VARCHAR(255),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `subscriber` (Email,CreateDate)
	VALUES (paramEmail, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_Update`
(
	IN paramId INT,
	IN paramEmail VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `subscriber`
	SET Email = paramEmail
		,CreateDate = paramCreateDate
	WHERE		`subscriber`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `subscriber`
	WHERE		`subscriber`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_Search`
(
	IN paramId INT,
	IN paramEmail VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`
	WHERE
		COALESCE(subscriber.`Id`,0) = COALESCE(paramId,subscriber.`Id`,0)
		AND COALESCE(subscriber.`Email`,'') = COALESCE(paramEmail,subscriber.`Email`,'')
		AND COALESCE(CAST(subscriber.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(subscriber.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/15/2018
Description:	Creates the emailtype table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`emailtype`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emailtype_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emailtype_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emailtype_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emailtype_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emailtype_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emailtype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`emailtype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_emailtype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emailtype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`emailtype`.`Id` AS `Id`,
		`emailtype`.`Name` AS `Name`,
		`emailtype`.`Description` AS `Description`
	FROM `emailtype`
	WHERE 		`emailtype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emailtype_LoadAll`
()
BEGIN
	SELECT
		`emailtype`.`Id` AS `Id`,
		`emailtype`.`Name` AS `Name`,
		`emailtype`.`Description` AS `Description`
	FROM `emailtype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emailtype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `emailtype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emailtype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `emailtype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`emailtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emailtype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `emailtype`
	WHERE		`emailtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emailtype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`emailtype`.`Id` AS `Id`,
		`emailtype`.`Name` AS `Name`,
		`emailtype`.`Description` AS `Description`
	FROM `emailtype`
	WHERE
		COALESCE(emailtype.`Id`,0) = COALESCE(paramId,emailtype.`Id`,0)
		AND COALESCE(emailtype.`Name`,'') = COALESCE(paramName,emailtype.`Name`,'')
		AND COALESCE(emailtype.`Description`,'') = COALESCE(paramDescription,emailtype.`Description`,'');
END //
DELIMITER ;




/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/15/2018
Description:	Creates the emaillog table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`emaillog`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emaillog_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emaillog_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emaillog_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emaillog_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emaillog_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_emaillog_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`emaillog` (
Id INT AUTO_INCREMENT,
Email VARCHAR(255),
SentDate DATETIME,
EmailTypeId INT,
CONSTRAINT pk_emaillog_Id PRIMARY KEY (Id),
CONSTRAINT fk_emaillog_EmailTypeId_emailtype_Id FOREIGN KEY (EmailTypeId) REFERENCES emailtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emaillog_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`emaillog`.`Id` AS `Id`,
		`emaillog`.`Email` AS `Email`,
		`emaillog`.`SentDate` AS `SentDate`,
		`emaillog`.`EmailTypeId` AS `EmailTypeId`
	FROM `emaillog`
	WHERE 		`emaillog`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emaillog_LoadAll`
()
BEGIN
	SELECT
		`emaillog`.`Id` AS `Id`,
		`emaillog`.`Email` AS `Email`,
		`emaillog`.`SentDate` AS `SentDate`,
		`emaillog`.`EmailTypeId` AS `EmailTypeId`
	FROM `emaillog`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emaillog_Add`
(
	 IN paramEmail VARCHAR(255),
	 IN paramSentDate DATETIME,
	 IN paramEmailTypeId INT
)
BEGIN
	INSERT INTO `emaillog` (Email,SentDate,EmailTypeId)
	VALUES (paramEmail, paramSentDate, paramEmailTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emaillog_Update`
(
	IN paramId INT,
	IN paramEmail VARCHAR(255),
	IN paramSentDate DATETIME,
	IN paramEmailTypeId INT
)
BEGIN
	UPDATE `emaillog`
	SET Email = paramEmail
		,SentDate = paramSentDate
		,EmailTypeId = paramEmailTypeId
	WHERE		`emaillog`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emaillog_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `emaillog`
	WHERE		`emaillog`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_emaillog_Search`
(
	IN paramId INT,
	IN paramEmail VARCHAR(255),
	IN paramSentDate DATETIME,
	IN paramEmailTypeId INT
)
BEGIN
	SELECT
		`emaillog`.`Id` AS `Id`,
		`emaillog`.`Email` AS `Email`,
		`emaillog`.`SentDate` AS `SentDate`,
		`emaillog`.`EmailTypeId` AS `EmailTypeId`
	FROM `emaillog`
	WHERE
		COALESCE(emaillog.`Id`,0) = COALESCE(paramId,emaillog.`Id`,0)
		AND COALESCE(emaillog.`Email`,'') = COALESCE(paramEmail,emaillog.`Email`,'')
		AND COALESCE(CAST(emaillog.`SentDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramSentDate AS DATE),CAST(emaillog.`SentDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(emaillog.`EmailTypeId`,0) = COALESCE(paramEmailTypeId,emaillog.`EmailTypeId`,0);
END //
DELIMITER ;

use businesstemplate;
DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_subscriber_Lookup`
(
	 IN paramEmail VARCHAR(255)
)
BEGIN
	SELECT
		`subscriber`.`Id` AS `Id`,
		`subscriber`.`Email` AS `Email`,
		`subscriber`.`CreateDate` AS `CreateDate`
	FROM `subscriber`
	WHERE 		`subscriber`.`Email` = paramEmail;
END //
DELIMITER ;

use businesstemplate;
INSERT INTO `emailtype` (`Id`, `Name`, `Description`) VALUES ('1', 'Account Registration Email', 'Account Registration Email.');
INSERT INTO `emailtype` (`Id`, `Name`, `Description`) VALUES ('2', 'Contact Form Email', 'Contact Form Email.');
INSERT INTO `emailtype` (`Id`, `Name`, `Description`) VALUES ('3', 'Generic Email', 'Generic Email sent out to subscribers.');

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			1/7/2018
Description:	Creates the upload table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`upload`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_upload_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_upload_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_upload_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_upload_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_upload_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_upload_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`upload` (
Id INT AUTO_INCREMENT,
Url VARCHAR(1024),
CONSTRAINT pk_upload_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_upload_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`upload`.`Id` AS `Id`,
		`upload`.`Url` AS `Url`
	FROM `upload`
	WHERE 		`upload`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_upload_LoadAll`
()
BEGIN
	SELECT
		`upload`.`Id` AS `Id`,
		`upload`.`Url` AS `Url`
	FROM `upload`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_upload_Add`
(
	 IN paramUrl VARCHAR(1024)
)
BEGIN
	INSERT INTO `upload` (Url)
	VALUES (paramUrl);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_upload_Update`
(
	IN paramId INT,
	IN paramUrl VARCHAR(1024)
)
BEGIN
	UPDATE `upload`
	SET Url = paramUrl
	WHERE		`upload`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_upload_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `upload`
	WHERE		`upload`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_upload_Search`
(
	IN paramId INT,
	IN paramUrl VARCHAR(1024)
)
BEGIN
	SELECT
		`upload`.`Id` AS `Id`,
		`upload`.`Url` AS `Url`
	FROM `upload`
	WHERE
		COALESCE(upload.`Id`,0) = COALESCE(paramId,upload.`Id`,0)
		AND COALESCE(upload.`Url`,'') = COALESCE(paramUrl,upload.`Url`,'');
END //
DELIMITER ;


