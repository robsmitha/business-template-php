/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/22/2017
Description:	Creates the event table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`event`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_event_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`event` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ImgUrl VARCHAR(1025),
StartDate DATETIME,
EndDate DATETIME,
Location VARCHAR(512),
EventTypeId INT,
TicketLink VARCHAR(1025),
CONSTRAINT pk_event_Id PRIMARY KEY (Id),
CONSTRAINT fk_event_EventTypeId_eventtype_Id FOREIGN KEY (EventTypeId) REFERENCES eventtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`
	WHERE 		`event`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_LoadAll`
()
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramStartDate DATETIME,
	 IN paramEndDate DATETIME,
	 IN paramLocation VARCHAR(512),
	 IN paramEventTypeId INT,
	 IN paramTicketLink VARCHAR(1025)
)
BEGIN
	INSERT INTO `event` (Name,Description,ImgUrl,StartDate,EndDate,Location,EventTypeId,TicketLink)
	VALUES (paramName, paramDescription, paramImgUrl, paramStartDate, paramEndDate, paramLocation, paramEventTypeId, paramTicketLink);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramStartDate DATETIME,
	IN paramEndDate DATETIME,
	IN paramLocation VARCHAR(512),
	IN paramEventTypeId INT,
	IN paramTicketLink VARCHAR(1025)
)
BEGIN
	UPDATE `event`
	SET Name = paramName
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,StartDate = paramStartDate
		,EndDate = paramEndDate
		,Location = paramLocation
		,EventTypeId = paramEventTypeId
		,TicketLink = paramTicketLink
	WHERE		`event`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `event`
	WHERE		`event`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_event_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramStartDate DATETIME,
	IN paramEndDate DATETIME,
	IN paramLocation VARCHAR(512),
	IN paramEventTypeId INT,
	IN paramTicketLink VARCHAR(1025)
)
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`
	WHERE
		COALESCE(event.`Id`,0) = COALESCE(paramId,event.`Id`,0)
		AND COALESCE(event.`Name`,'') = COALESCE(paramName,event.`Name`,'')
		AND COALESCE(event.`Description`,'') = COALESCE(paramDescription,event.`Description`,'')
		AND COALESCE(event.`ImgUrl`,'') = COALESCE(paramImgUrl,event.`ImgUrl`,'')
		AND COALESCE(CAST(event.`StartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramStartDate AS DATE),CAST(event.`StartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(event.`EndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEndDate AS DATE),CAST(event.`EndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(event.`Location`,'') = COALESCE(paramLocation,event.`Location`,'')
		AND COALESCE(event.`EventTypeId`,0) = COALESCE(paramEventTypeId,event.`EventTypeId`,0)
		AND COALESCE(event.`TicketLink`,'') = COALESCE(paramTicketLink,event.`TicketLink`,'');
END //
DELIMITER ;


