/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/27/2017
Description:	Creates the order table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`order`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_order_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`order` (
Id INT AUTO_INCREMENT,
CustomerId INT,
OrderStatusTypeId INT,
OrderDate DATETIME,
StripeCharge VARCHAR(255),
StripeCustomer VARCHAR(255),
StripeCard VARCHAR(255),
StripeAmount DECIMAL(9),
CONSTRAINT pk_order_Id PRIMARY KEY (Id),
CONSTRAINT fk_order_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_order_OrderStatusTypeId_orderstatustype_Id FOREIGN KEY (OrderStatusTypeId) REFERENCES orderstatustype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`
	WHERE 		`order`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_LoadAll`
()
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Add`
(
	 IN paramCustomerId INT,
	 IN paramOrderStatusTypeId INT,
	 IN paramOrderDate DATETIME,
	 IN paramStripeCharge VARCHAR(255),
	 IN paramStripeCustomer VARCHAR(255),
	 IN paramStripeCard VARCHAR(255),
	 IN paramStripeAmount DECIMAL(9)
)
BEGIN
	INSERT INTO `order` (CustomerId,OrderStatusTypeId,OrderDate,StripeCharge,StripeCustomer,StripeCard,StripeAmount)
	VALUES (paramCustomerId, paramOrderStatusTypeId, paramOrderDate, paramStripeCharge, paramStripeCustomer, paramStripeCard, paramStripeAmount);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Update`
(
	IN paramId INT,
	IN paramCustomerId INT,
	IN paramOrderStatusTypeId INT,
	IN paramOrderDate DATETIME,
	IN paramStripeCharge VARCHAR(255),
	IN paramStripeCustomer VARCHAR(255),
	IN paramStripeCard VARCHAR(255),
	IN paramStripeAmount DECIMAL(9)
)
BEGIN
	UPDATE `order`
	SET CustomerId = paramCustomerId
		,OrderStatusTypeId = paramOrderStatusTypeId
		,OrderDate = paramOrderDate
		,StripeCharge = paramStripeCharge
		,StripeCustomer = paramStripeCustomer
		,StripeCard = paramStripeCard
		,StripeAmount = paramStripeAmount
	WHERE		`order`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `order`
	WHERE		`order`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_order_Search`
(
	IN paramId INT,
	IN paramCustomerId INT,
	IN paramOrderStatusTypeId INT,
	IN paramOrderDate DATETIME,
	IN paramStripeCharge VARCHAR(255),
	IN paramStripeCustomer VARCHAR(255),
	IN paramStripeCard VARCHAR(255),
	IN paramStripeAmount DECIMAL(9)
)
BEGIN
	SELECT
		`order`.`Id` AS `Id`,
		`order`.`CustomerId` AS `CustomerId`,
		`order`.`OrderStatusTypeId` AS `OrderStatusTypeId`,
		`order`.`OrderDate` AS `OrderDate`,
		`order`.`StripeCharge` AS `StripeCharge`,
		`order`.`StripeCustomer` AS `StripeCustomer`,
		`order`.`StripeCard` AS `StripeCard`,
		`order`.`StripeAmount` AS `StripeAmount`
	FROM `order`
	WHERE
		COALESCE(`order`.`Id`,0) = COALESCE(paramId,`order`.`Id`,0)
		AND COALESCE(`order`.`CustomerId`,0) = COALESCE(paramCustomerId,`order`.`CustomerId`,0)
		AND COALESCE(`order`.`OrderStatusTypeId`,0) = COALESCE(paramOrderStatusTypeId,`order`.`OrderStatusTypeId`,0)
		AND COALESCE(CAST(`order`.`OrderDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramOrderDate AS DATE),CAST(`order`.`OrderDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(`order`.`StripeCharge`,'') = COALESCE(paramStripeCharge,`order`.`StripeCharge`,'')
		AND COALESCE(`order`.`StripeCustomer`,'') = COALESCE(paramStripeCustomer,`order`.`StripeCustomer`,'')
		AND COALESCE(`order`.`StripeCard`,'') = COALESCE(paramStripeCard,`order`.`StripeCard`,'')
		AND COALESCE(`order`.`StripeAmount`,0) = COALESCE(paramStripeAmount,`order`.`StripeAmount`,0);
END //
DELIMITER ;


