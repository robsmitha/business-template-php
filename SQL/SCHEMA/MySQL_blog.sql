/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/15/2017
Description:	Creates the blog table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`blog`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_blog_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`blog` (
Id INT AUTO_INCREMENT,
Title VARCHAR(255),
Description VARCHAR(32768),
ImgUrl VARCHAR(1025),
BlogCategoryId INT,
SecurityUserId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_blog_Id PRIMARY KEY (Id),
CONSTRAINT fk_blog_BlogCategoryId_blogcategory_Id FOREIGN KEY (BlogCategoryId) REFERENCES blogcategory (Id),
CONSTRAINT fk_blog_SecurityUserId_securityuser_Id FOREIGN KEY (SecurityUserId) REFERENCES securityuser (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`blog`.`Id` AS `Id`,
		`blog`.`Title` AS `Title`,
		`blog`.`Description` AS `Description`,
		`blog`.`ImgUrl` AS `ImgUrl`,
		`blog`.`BlogCategoryId` AS `BlogCategoryId`,
		`blog`.`SecurityUserId` AS `SecurityUserId`,
		`blog`.`CreateDate` AS `CreateDate`,
		`blog`.`EditDate` AS `EditDate`
	FROM `blog`
	WHERE 		`blog`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_LoadAll`
()
BEGIN
	SELECT
		`blog`.`Id` AS `Id`,
		`blog`.`Title` AS `Title`,
		`blog`.`Description` AS `Description`,
		`blog`.`ImgUrl` AS `ImgUrl`,
		`blog`.`BlogCategoryId` AS `BlogCategoryId`,
		`blog`.`SecurityUserId` AS `SecurityUserId`,
		`blog`.`CreateDate` AS `CreateDate`,
		`blog`.`EditDate` AS `EditDate`
	FROM `blog`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Add`
(
	 IN paramTitle VARCHAR(255),
	 IN paramDescription VARCHAR(32768),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramBlogCategoryId INT,
	 IN paramSecurityUserId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `blog` (Title,Description,ImgUrl,BlogCategoryId,SecurityUserId,CreateDate,EditDate)
	VALUES (paramTitle, paramDescription, paramImgUrl, paramBlogCategoryId, paramSecurityUserId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Update`
(
	IN paramId INT,
	IN paramTitle VARCHAR(255),
	IN paramDescription VARCHAR(32768),
	IN paramImgUrl VARCHAR(1025),
	IN paramBlogCategoryId INT,
	IN paramSecurityUserId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `blog`
	SET Title = paramTitle
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,BlogCategoryId = paramBlogCategoryId
		,SecurityUserId = paramSecurityUserId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`blog`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `blog`
	WHERE		`blog`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_blog_Search`
(
	IN paramId INT,
	IN paramTitle VARCHAR(255),
	IN paramDescription VARCHAR(32768),
	IN paramImgUrl VARCHAR(1025),
	IN paramBlogCategoryId INT,
	IN paramSecurityUserId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`blog`.`Id` AS `Id`,
		`blog`.`Title` AS `Title`,
		`blog`.`Description` AS `Description`,
		`blog`.`ImgUrl` AS `ImgUrl`,
		`blog`.`BlogCategoryId` AS `BlogCategoryId`,
		`blog`.`SecurityUserId` AS `SecurityUserId`,
		`blog`.`CreateDate` AS `CreateDate`,
		`blog`.`EditDate` AS `EditDate`
	FROM `blog`
	WHERE
		COALESCE(blog.`Id`,0) = COALESCE(paramId,blog.`Id`,0)
		AND COALESCE(blog.`Title`,'') = COALESCE(paramTitle,blog.`Title`,'')
		AND COALESCE(blog.`Description`,'') = COALESCE(paramDescription,blog.`Description`,'')
		AND COALESCE(blog.`ImgUrl`,'') = COALESCE(paramImgUrl,blog.`ImgUrl`,'')
		AND COALESCE(blog.`BlogCategoryId`,0) = COALESCE(paramBlogCategoryId,blog.`BlogCategoryId`,0)
		AND COALESCE(blog.`SecurityUserId`,0) = COALESCE(paramSecurityUserId,blog.`SecurityUserId`,0)
		AND COALESCE(CAST(blog.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(blog.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(blog.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(blog.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


