/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/27/2017
Description:	Creates the orderitem table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`orderitem`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_orderitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`orderitem` (
Id INT AUTO_INCREMENT,
OrderId INT,
ItemId INT,
Quantity INT,
ItemStartDate DATETIME,
ItemEndDate DATETIME,
ItemTypeId INT,
CONSTRAINT pk_orderitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_orderitem_OrderId_order_Id FOREIGN KEY (OrderId) REFERENCES `order` (Id),
CONSTRAINT fk_orderitem_ItemId_item_Id FOREIGN KEY (ItemId) REFERENCES item (Id),
CONSTRAINT fk_orderitem_ItemTypeId_itemtype_Id FOREIGN KEY (ItemTypeId) REFERENCES itemtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`
	WHERE 		`orderitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_LoadAll`
()
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Add`
(
	 IN paramOrderId INT,
	 IN paramItemId INT,
	 IN paramQuantity INT,
	 IN paramItemStartDate DATETIME,
	 IN paramItemEndDate DATETIME,
	 IN paramItemTypeId INT
)
BEGIN
	INSERT INTO `orderitem` (OrderId,ItemId,Quantity,ItemStartDate,ItemEndDate,ItemTypeId)
	VALUES (paramOrderId, paramItemId, paramQuantity, paramItemStartDate, paramItemEndDate, paramItemTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Update`
(
	IN paramId INT,
	IN paramOrderId INT,
	IN paramItemId INT,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	UPDATE `orderitem`
	SET OrderId = paramOrderId
		,ItemId = paramItemId
		,Quantity = paramQuantity
		,ItemStartDate = paramItemStartDate
		,ItemEndDate = paramItemEndDate
		,ItemTypeId = paramItemTypeId
	WHERE		`orderitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `orderitem`
	WHERE		`orderitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_orderitem_Search`
(
	IN paramId INT,
	IN paramOrderId INT,
	IN paramItemId INT,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	SELECT
		`orderitem`.`Id` AS `Id`,
		`orderitem`.`OrderId` AS `OrderId`,
		`orderitem`.`ItemId` AS `ItemId`,
		`orderitem`.`Quantity` AS `Quantity`,
		`orderitem`.`ItemStartDate` AS `ItemStartDate`,
		`orderitem`.`ItemEndDate` AS `ItemEndDate`,
		`orderitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `orderitem`
	WHERE
		COALESCE(orderitem.`Id`,0) = COALESCE(paramId,orderitem.`Id`,0)
		AND COALESCE(orderitem.`OrderId`,0) = COALESCE(paramOrderId,orderitem.`OrderId`,0)
		AND COALESCE(orderitem.`ItemId`,0) = COALESCE(paramItemId,orderitem.`ItemId`,0)
		AND COALESCE(orderitem.`Quantity`,0) = COALESCE(paramQuantity,orderitem.`Quantity`,0)
		AND COALESCE(CAST(orderitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemStartDate AS DATE),CAST(orderitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(orderitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemEndDate AS DATE),CAST(orderitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(orderitem.`ItemTypeId`,0) = COALESCE(paramItemTypeId,orderitem.`ItemTypeId`,0);
END //
DELIMITER ;


