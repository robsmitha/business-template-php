/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/12/2017
Description:	Creates the cartitem table and respective stored procedures

*/


USE businesstemplate;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `businesstemplate`.`cartitem`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Load`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_LoadAll`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Add`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Update`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Delete`;
DROP PROCEDURE IF EXISTS `businesstemplate`.`usp_cartitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `businesstemplate`.`cartitem` (
Id INT AUTO_INCREMENT,
CartId INT,
ItemId INT,
AddDate DATETIME,
Quantity INT,
ItemStartDate DATETIME,
ItemEndDate DATETIME,
ItemTypeId INT,
CONSTRAINT pk_cartitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_cartitem_CartId_cart_Id FOREIGN KEY (CartId) REFERENCES cart (Id),
CONSTRAINT fk_cartitem_ItemId_item_Id FOREIGN KEY (ItemId) REFERENCES item (Id),
CONSTRAINT fk_cartitem_ItemTypeId_item_Id FOREIGN KEY (ItemTypeId) REFERENCES itemtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`
	WHERE 		`cartitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_LoadAll`
()
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Add`
(
	 IN paramCartId INT,
	 IN paramItemId INT,
	 IN paramAddDate DATETIME,
	 IN paramQuantity INT,
	 IN paramItemStartDate DATETIME,
	 IN paramItemEndDate DATETIME,
	 IN paramItemTypeId INT
)
BEGIN
	INSERT INTO `cartitem` (CartId,ItemId,AddDate,Quantity,ItemStartDate,ItemEndDate,ItemTypeId)
	VALUES (paramCartId, paramItemId, paramAddDate, paramQuantity, paramItemStartDate, paramItemEndDate, paramItemTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Update`
(
	IN paramId INT,
	IN paramCartId INT,
	IN paramItemId INT,
	IN paramAddDate DATETIME,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	UPDATE `cartitem`
	SET CartId = paramCartId
		,ItemId = paramItemId
		,AddDate = paramAddDate
		,Quantity = paramQuantity
		,ItemStartDate = paramItemStartDate
		,ItemEndDate = paramItemEndDate
		,ItemTypeId = paramItemTypeId
	WHERE		`cartitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `cartitem`
	WHERE		`cartitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `businesstemplate`.`usp_cartitem_Search`
(
	IN paramId INT,
	IN paramCartId INT,
	IN paramItemId INT,
	IN paramAddDate DATETIME,
	IN paramQuantity INT,
	IN paramItemStartDate DATETIME,
	IN paramItemEndDate DATETIME,
	IN paramItemTypeId INT
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`CartId` AS `CartId`,
		`cartitem`.`ItemId` AS `ItemId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`ItemStartDate` AS `ItemStartDate`,
		`cartitem`.`ItemEndDate` AS `ItemEndDate`,
		`cartitem`.`ItemTypeId` AS `ItemTypeId`
	FROM `cartitem`
	WHERE
		COALESCE(cartitem.`Id`,0) = COALESCE(paramId,cartitem.`Id`,0)
		AND COALESCE(cartitem.`CartId`,0) = COALESCE(paramCartId,cartitem.`CartId`,0)
		AND COALESCE(cartitem.`ItemId`,0) = COALESCE(paramItemId,cartitem.`ItemId`,0)
		AND COALESCE(CAST(cartitem.`AddDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramAddDate AS DATE),CAST(cartitem.`AddDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(cartitem.`Quantity`,0) = COALESCE(paramQuantity,cartitem.`Quantity`,0)
		AND COALESCE(CAST(cartitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemStartDate AS DATE),CAST(cartitem.`ItemStartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(cartitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramItemEndDate AS DATE),CAST(cartitem.`ItemEndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(cartitem.`ItemTypeId`,0) = COALESCE(paramItemTypeId,cartitem.`ItemTypeId`,0);
END //
DELIMITER ;


